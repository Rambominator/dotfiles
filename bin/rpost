#!/usr/bin/env ruby
#encoding: utf-8

require "uri"
require "net/http"
require "nokogiri"
require "yaml"
require "optparse"
require_relative "../lib/mail.rb"

URL_OPEN_RETRY_TIMES = 3
STORE_FILE = File.join(ENV['HOME'],'Dropbox/configs/post_track_state')
file_with_tracking_numbers = File.join(ENV['HOME'],'Dropbox/configs/post_track')
@data = {}

def get_html_body(url,params)
  i = URL_OPEN_RETRY_TIMES 
  begin
    html = Net::HTTP.post_form(URI.parse(url), params)
  rescue Exception => e
    retry if ((i -= 1 ) > 0 && e.message == "Timeout::Error")
    puts e.message
    [1,0]
  end

  if html.code != '200'
    puts "HTTP response not OK"
    [1,0]
  end

  [0, html.body]
end

def usps(array)

  usurl = 'http://trkcnfrm1.smi.usps.com/PTSInternetWeb/InterLabelInquiry.do'
  usparams = {'origTrackNum' => 'XXXXXXXXXXXXX', 'Go to Label/Receipt Number page' => 'Go'}

  array.each do |id|
    id.chomp!
    break if id !~ /.*US/
    usparams['origTrackNum']=id
    puts "\033[31mUSPS: #{id}\n--------------------\033[0m"

    (exit_code, body) = get_html_body(usurl,usparams)
    next unless exit_code == 0
    doc = Nokogiri.HTML(body, nil, 'UTF-8')
    td = doc.xpath("/html/body/table[4]/tr/td[2]/table/tr[3]/td/table/tr/td[2]/table/tr[4]/td[2]/table/tr")
    if td.empty?
      puts "Item not found\n\n"
      next
    end
    (1...td.count).each {|t| puts "\033[4;33m*\033[0m #{td[t].inner_text.strip}"}
    puts
    store_state(id,td)
  end
end

def rupost(array)

  ruurl = 'http://www.russianpost.ru/rp/servise/ru/home/postuslug/trackingpo'
  ruparams = {'BarCode' => 'XXXXXXXXXXXXX', 'searchsign' => '1'}

  array.each do |id|
    id.chomp!
    ruparams['BarCode'] = id
    puts "\033[31mRUPOST: #{id}\n----------------------\033[0m"

    (exit_code, body) = get_html_body(ruurl,ruparams)
    next unless exit_code == 0

    doc = Nokogiri.HTML(body, nil, 'UTF-8')
    td = doc.xpath("/html/body/form/table/tr/td[2]/div/div/table[4]/tbody/tr/td")
    if td.empty?
      puts "Item not found\n\n"
      next
    end

    lines = []
    cell_lens = Array.new(10,0)
    temp = ["status", "date", "index", "name", "attribute", 
             "weight","price","pay","index","address"]
    td.each {|t| temp << t.inner_text.strip }
    points = td.count/10 + 1
    points.times {|p| lines << temp[(p*10)...(p*10+10)]}
    10.times do |cell|
      points.times do |point|
        if lines[point][cell].length > cell_lens[cell]
          cell_lens[cell] = lines[point][cell].length
        end
      end
    end
    lines[0].each_with_index {|t,i| print "\033[30;47m #{t.center(cell_lens[i])} \033[0m "}
    puts "\n\n"
    lines[1..-1].each do |l|
      l.each_with_index { |t,i| print "\033[30;47m #{t.center(cell_lens[i])} \033[0m " }
      puts
    end
    puts
    store_state("RU-#{id}",td)
  end
end

def store_state(id,td)
  @data[id] = []
  td.each {|t| @data[id] << t.inner_text.strip }
end

def cmp_stats(mail)
  unless File.readable?(STORE_FILE)
    send_write(mail)
    return
  end
  @old_data = YAML.load_file(STORE_FILE)
  if @old_data != @data
    send_write(mail)
  end
end

def send_write(mail)
  msg = ''
  @data.each {|k,v| msg << "#{k}\n    #{v.join(' ')}\n\n"}
  Mail.send_gmail("Post tracking update", msg) if mail
  File.open(STORE_FILE, 'w') {|f| YAML.dump(@data, f)}
end

options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: rpost [-m|--mail]"
  options[:mail] = false
  opts.on('-m', '--mail', 'Send mail') do
    options[:mail] = true
  end
  opts.on( '-h', '--help', "Display this screen" ) do
    puts opts
    exit
  end
end

optparse.parse!

unless File.readable?(file_with_tracking_numbers)
  puts "File with tracking numbers \"#{file_with_tracking_numbers}\" not exist or not readable"
  exit
end
array = IO.readlines(file_with_tracking_numbers)

usps(array)
rupost(array)
a = ''
cmp_stats(options[:mail])
